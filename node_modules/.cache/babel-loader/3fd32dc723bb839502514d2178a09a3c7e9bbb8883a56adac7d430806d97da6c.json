{"ast":null,"code":"var _jsxFileName = \"/Users/clementr/Desktop/portfolio/portfolio_pro/src/components/NetworkAnimation.js\",\n  _s = $RefreshSig$();\n// src/components/NetworkAnimation.js\nimport React, { useRef, useEffect, useMemo } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls } from '@react-three/drei';\nimport * as THREE from 'three';\n\n// Composant Particles pour gérer les particules et leur animation\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Particles = () => {\n  _s();\n  const particlesRef = useRef(); // Référence pour accéder à l'objet points\n\n  // Utilisation de useMemo pour créer la géométrie des particules une seule fois\n  const particlesGeometry = useMemo(() => {\n    const particleCount = 500; // Nombre de particules\n    const positions = new Float32Array(particleCount * 3); // Tableau pour stocker les positions des particules\n\n    // Initialiser les positions des particules de manière aléatoire\n    for (let i = 0; i < particleCount; i++) {\n      positions[i * 3] = (Math.random() - 0.5) * 10;\n      positions[i * 3 + 1] = (Math.random() - 0.5) * 10;\n      positions[i * 3 + 2] = (Math.random() - 0.5) * 10;\n    }\n\n    // Créer la géométrie des particules et définir les positions\n    const geometry = new THREE.BufferGeometry();\n    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    return geometry; // Retourner la géométrie pour l'utiliser dans le rendu\n  }, []); // Le tableau vide comme deuxième argument signifie que cette logique s'exécute une seule fois\n\n  // Utilisation de useFrame pour animer les particules à chaque frame\n  useFrame(() => {\n    if (particlesRef.current) {\n      // Vérifier si particlesRef est défini\n      particlesRef.current.rotation.x += 0.001; // Rotation sur l'axe x\n      particlesRef.current.rotation.y += 0.001; // Rotation sur l'axe y\n    }\n  });\n  return (\n    /*#__PURE__*/\n    // Composant points pour rendre les particules, avec la géométrie créée et le matériau\n    _jsxDEV(\"points\", {\n      ref: particlesRef,\n      geometry: particlesGeometry,\n      children: [/*#__PURE__*/_jsxDEV(\"pointsMaterial\", {\n        color: \"#00ff00\",\n        size: 0.1\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 7\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }, this)\n  );\n};\n\n// Composant principal pour encapsuler la scène Canvas de react-three-fiber\n_s(Particles, \"WtuHXRmGCfoloh1iKdjbFXrDzao=\", false, function () {\n  return [useFrame];\n});\n_c = Particles;\nconst NetworkAnimation = () => {\n  return (\n    /*#__PURE__*/\n    // Canvas de react-three-fiber pour rendre la scène 3D\n    _jsxDEV(Canvas, {\n      camera: {\n        position: [0, 0, 10],\n        fov: 7\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"ambientLight\", {\n        intensity: 0.5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }, this), \" \", /*#__PURE__*/_jsxDEV(\"pointLight\", {\n        position: [10, 10, 10]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 7\n      }, this), \" \", /*#__PURE__*/_jsxDEV(Particles, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 7\n      }, this), \" \", /*#__PURE__*/_jsxDEV(OrbitControls, {\n        enableZoom: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 7\n      }, this), \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }, this)\n  );\n};\n_c2 = NetworkAnimation;\nexport default NetworkAnimation;\nvar _c, _c2;\n$RefreshReg$(_c, \"Particles\");\n$RefreshReg$(_c2, \"NetworkAnimation\");","map":{"version":3,"names":["React","useRef","useEffect","useMemo","Canvas","useFrame","OrbitControls","THREE","jsxDEV","_jsxDEV","Particles","_s","particlesRef","particlesGeometry","particleCount","positions","Float32Array","i","Math","random","geometry","BufferGeometry","setAttribute","BufferAttribute","current","rotation","x","y","ref","children","color","size","fileName","_jsxFileName","lineNumber","columnNumber","_c","NetworkAnimation","camera","position","fov","intensity","enableZoom","_c2","$RefreshReg$"],"sources":["/Users/clementr/Desktop/portfolio/portfolio_pro/src/components/NetworkAnimation.js"],"sourcesContent":["// src/components/NetworkAnimation.js\nimport React, { useRef, useEffect, useMemo } from 'react';\nimport { Canvas, useFrame } from '@react-three/fiber';\nimport { OrbitControls } from '@react-three/drei';\nimport * as THREE from 'three';\n\n// Composant Particles pour gérer les particules et leur animation\nconst Particles = () => {\n  const particlesRef = useRef(); // Référence pour accéder à l'objet points\n\n  // Utilisation de useMemo pour créer la géométrie des particules une seule fois\n  const particlesGeometry = useMemo(() => {\n    const particleCount = 500; // Nombre de particules\n    const positions = new Float32Array(particleCount * 3); // Tableau pour stocker les positions des particules\n\n    // Initialiser les positions des particules de manière aléatoire\n    for (let i = 0; i < particleCount; i++) {\n      positions[i * 3] = (Math.random() - 0.5) * 10;\n      positions[i * 3 + 1] = (Math.random() - 0.5) * 10;\n      positions[i * 3 + 2] = (Math.random() - 0.5) * 10;\n    }\n\n    // Créer la géométrie des particules et définir les positions\n    const geometry = new THREE.BufferGeometry();\n    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n\n    return geometry; // Retourner la géométrie pour l'utiliser dans le rendu\n  }, []); // Le tableau vide comme deuxième argument signifie que cette logique s'exécute une seule fois\n\n  // Utilisation de useFrame pour animer les particules à chaque frame\n  useFrame(() => {\n    if (particlesRef.current) { // Vérifier si particlesRef est défini\n      particlesRef.current.rotation.x += 0.001; // Rotation sur l'axe x\n      particlesRef.current.rotation.y += 0.001; // Rotation sur l'axe y\n    }\n  });\n\n  return (\n    // Composant points pour rendre les particules, avec la géométrie créée et le matériau\n    <points ref={particlesRef} geometry={particlesGeometry}>\n      <pointsMaterial color=\"#00ff00\" size={0.1} /> {/* Matériau des particules */}\n    </points>\n  );\n};\n\n// Composant principal pour encapsuler la scène Canvas de react-three-fiber\nconst NetworkAnimation = () => {\n  return (\n    // Canvas de react-three-fiber pour rendre la scène 3D\n    <Canvas camera={{ position: [0, 0, 10], fov: 7 }}>\n      <ambientLight intensity={0.5} /> {/* Lumière ambiante */}\n      <pointLight position={[10, 10, 10]} /> {/* Lumière ponctuelle */}\n      <Particles /> {/* Ajout du composant Particles */}\n      <OrbitControls enableZoom={false} /> {/* Contrôles de la caméra pour permettre l'interaction, zoom désactivé */}\n    </Canvas>\n  );\n};\n\nexport default NetworkAnimation;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}